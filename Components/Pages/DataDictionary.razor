@page "/DataDictionary"
@using RitaAppBlazor.Data.Models
@inject NavigationManager NavManager

<main>
	<div class="tabs-container">
		<!-- Lewa część: Zakładki -->
		<div class="tabs">
			<div class="@(dictionaryType == "m" ? "tab active" : "tab")" @onclick='() => SetParameterValue("m")' data-content="magazyn">Magazyn</div>
			<div class="@(dictionaryType == "u" ? "tab active" : "tab")" @onclick='() => SetParameterValue("u")' data-content="jednostka">Jednostka</div>
			<div class="@(dictionaryType == "c" ? "tab active" : "tab")" @onclick='() => SetParameterValue("c")' data-content="kategoria">Kategoria</div>
			<div class="@(dictionaryType == "pc" ? "tab active" : "tab")" @onclick='() => SetParameterValue("pc")' data-content="karta-produktu">Karta Produktu</div>
		</div>

		<!-- Prawa część: Przyciski akcji -->
		<div class="actions">
			<button class="action-button">Dodaj</button>
			<button class="action-button">Edytuj</button>
			<button class="action-button">Usuń</button>
		</div>
	</div>



	<!-- Główna treść sekcji -->
	<div class="content-container">
		<div id="magazyn" class="@(dictionaryType == "m" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
							<th>Lokalizacja</th>
						</tr>
					</thead>
					<tbody>
						@if (magazines is not null)
						{
							foreach (var magazine in magazines)
							{
								<tr id="@magazine.Id" @onclick="()=>SetParameterValue(dictionaryType, magazine.Id.ToString())" class="@(magazine.Id == currentMagazine.Id ? "active-row" : "")">
									<td>@magazine.Name</td>
									<td>@magazine.Location</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>


		<div id="jednostka" class="@(dictionaryType == "u" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
							<th>Skrót</th>
						</tr>
					</thead>
					<tbody>
						@if (units is not null)
						{
							foreach (var unit in units)
							{
								<tr id="@unit.Id" @onclick="()=>SetParameterValue(dictionaryType, unit.Id.ToString())" class="@(unit.Id == currentUnit.Id ? "active-row" : "")">
									<td>@unit.Name</td>
									<td>@unit.ShortName</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>

		<div id="kategoria" class="@(dictionaryType == "c" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
						</tr>
					</thead>
					<tbody>
						@if (categories is not null)
						{
							foreach (var category in categories)
							{
								<tr id="@category.Id" @onclick="()=>SetParameterValue(dictionaryType, category.Id.ToString())" class="@(category.Id == currentCategory.Id ? "active-row" : "")">
									<td>@category.Name</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>

		<div id="karta-produktu" class="@(dictionaryType == "pc" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
							<th>Kategoria</th>
							<th>Jednostka</th>
						</tr>
					</thead>
					<tbody>
						@if (productCards is not null)
						{
							foreach (var productCard in productCards)
							{
								<tr id="@productCard.Id" @onclick="()=>SetParameterValue(dictionaryType, productCard.Id.ToString())" class="@(productCard.Id == currentProductCard.Id ? "active-row" : "")">
									<td>@productCard.Name</td>
									<td>@string.Join(", ", @productCard.Categories?.Select(p => p.Name))</td>
									<td>@productCard.Unit.Name</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</main>

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "dt")]
	public string dictionaryType { get; set; }
	[Parameter]
	[SupplyParameterFromQuery(Name = "id")]
	public string recordId { get; set; }

	private Magazine currentMagazine = new();
	private Unit currentUnit = new();
	private Category currentCategory = new();
	private ProductCard currentProductCard = new();

	HttpClient httpClient = new();

	private List<Magazine>? magazines = new();
	private List<Unit>? units = new();
	private List<Category>? categories = new();
	private List<ProductCard>? productCards = new();

	protected async override Task OnInitializedAsync()
	{
		var magazineResponse = await httpClient.GetAsync("http://localhost:5000/api/Magazines");
		var unitResponse = await httpClient.GetAsync("http://localhost:5000/api/Units");
		var categoryResponse = await httpClient.GetAsync("http://localhost:5000/api/Categories");
		var productCardResponse = await httpClient.GetAsync("http://localhost:5000/api/ProductCards");

		if (magazineResponse.IsSuccessStatusCode)
		{
			var magazineText = await magazineResponse.Content.ReadAsStringAsync();
			magazines = System.Text.Json.JsonSerializer.Deserialize<List<Magazine>>(magazineText);
		}

		if (unitResponse.IsSuccessStatusCode)
		{
			var unitText = await unitResponse.Content.ReadAsStringAsync();
			units = System.Text.Json.JsonSerializer.Deserialize<List<Unit>>(unitText);
		}

		if (categoryResponse.IsSuccessStatusCode)
		{
			var categoryText = await categoryResponse.Content.ReadAsStringAsync();
			categories = System.Text.Json.JsonSerializer.Deserialize<List<Category>>(categoryText);
		}

		if (productCardResponse.IsSuccessStatusCode)
		{
			var productCardText = await productCardResponse.Content.ReadAsStringAsync();
			productCards = System.Text.Json.JsonSerializer.Deserialize<List<ProductCard>>(productCardText);
		}
		StateHasChanged();

		return;
	}

	protected async override Task OnParametersSetAsync()
	{
		if (dictionaryType == "m" && recordId == "0")
		{
			currentMagazine = new();
		}
		else if (dictionaryType == "u" && recordId == "0")
		{
			currentUnit = new();
		}
		else if (dictionaryType == "c" && recordId == "0")
		{
			currentCategory = new();
		}
		else if (dictionaryType == "pc" && recordId == "0")
		{
			currentProductCard = new();
		}
		else if (dictionaryType == "m" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentMagazine = magazines.First(x => x.Id == intId);
		}
		else if (dictionaryType == "u" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentUnit = units.First(x => x.Id == intId);
		}
		else if (dictionaryType == "c" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentCategory = categories.First(x => x.Id == intId);
		}
		else if (dictionaryType == "pc" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentProductCard = productCards.First(x => x.Id == intId);
		}
		return;
	}

	private void SetParameterValue(string dictionaryType, string id = "0")
	{
		NavManager.NavigateTo($"https://localhost:7110/dataDictionary?dt={dictionaryType}&id={id}");
	}

}
