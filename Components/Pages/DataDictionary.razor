@page "/DataDictionary"
@using RitaAppBlazor.Data.Models
@using Newtonsoft.Json
@using System.Text.Json
@inject NavigationManager NavManager

<main>
	@if (dictionaryType is null)
	{
		SetParameterValue("m");
	}
	<div class="tabs-container">
		<!-- Lewa część: Zakładki -->
		<div class="tabs">
			<div class="@(dictionaryType == "m" ? "tab active" : "tab")" @onclick='() => SetParameterValue("m")' data-content="magazyn">Magazyn</div>
			<div class="@(dictionaryType == "u" ? "tab active" : "tab")" @onclick='() => SetParameterValue("u")' data-content="jednostka">Jednostka</div>
			<div class="@(dictionaryType == "c" ? "tab active" : "tab")" @onclick='() => SetParameterValue("c")' data-content="kategoria">Kategoria</div>
			<div class="@(dictionaryType == "pc" ? "tab active" : "tab")" @onclick='() => SetParameterValue("pc")' data-content="karta-produktu">Karta Produktu</div>
		</div>

		<!-- Prawa część: Przyciski akcji -->
		<div class="actions">
			<button class="action-button" @onclick="()=>OpenCreatingWindows()">Dodaj</button>
			<button class="action-button" @onclick="()=>OpenEditingWindows()">Edytuj</button>
			<button class="action-button" @onclick="()=>OpenWindow(9)">Usuń</button>
		</div>
	</div>

	<div class="magazine-container @(windowId == 1 ? "set-visible" : "set-hidden" )">
		<h2>Dodaj magazyn</h2>
		<label>Nazwa:</label>
		<input type="text" placeholder="Wpisz nazwę magazynu" @bind="newMagazine.Name">

		<label>Lokalizacja:</label>
		<input type="text" placeholder="Wpisz lokalizację magazynu" @bind="newMagazine.Location">

		<div class="button-group">
			<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
			<button class="save-button" @onclick="()=>CreateMagazine(newMagazine)">Zapisz</button>
		</div>
	</div>

	<div class="magazine-container @(windowId == 2 ? "set-visible" : "set-hidden" )">
		@if (tempMagazine is not null)
		{
			<h2>Edytuj magazyn</h2>
			<label>Nazwa:</label>
			<input type="text" placeholder="Wpisz nazwę magazynu" @bind="tempMagazine.Name">

			<label>Lokalizacja:</label>
			<input type="text" placeholder="Wpisz lokalizację magazynu" @bind="tempMagazine.Location">

			<div class="button-group">
				<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
				<button class="save-button" @onclick="()=>UpdateMagazine(tempMagazine)">Zapisz</button>
			</div>
		}
	</div>

	<div class="unit-container @(windowId == 3 ? "set-visible" : "set-hidden" )">
		<h2>Dodaj jednostkę</h2>
		<label>Nazwa:</label>
		<input type="text" placeholder="Wpisz nazwę jednostki" @bind="newUnit.Name">

		<label>Skrót jednostki:</label>
		<input type="text" placeholder="Wpisz krótszą nazwę jednostki" @bind="newUnit.ShortName">

		<div class="button-group">
			<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
			<button class="save-button" @onclick="()=>CreateUnit(newUnit)">Zapisz</button>
		</div>
	</div>

	<div class="unit-container @(windowId == 4 ? "set-visible" : "set-hidden" )">
		@if (tempUnit is not null)
		{
			<h2>Edytuj jednostkę</h2>
			<label>Nazwa:</label>
			<input type="text" placeholder="Wpisz nazwę jednostki" @bind="tempUnit.Name">

			<label>Skrót jednostki:</label>
			<input type="text" placeholder="Wpisz krótszą nazwę jednostki" @bind="tempUnit.ShortName">

			<div class="button-group">
				<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
				<button class="save-button" @onclick="()=>UpdateUnit(tempUnit)">Zapisz</button>
			</div>
		}
	</div>

	<div class="category-container @(windowId == 5 ? "set-visible" : "set-hidden" )">
		<h2>Dodaj kategorię</h2>
		<label>Nazwa:</label>
		<input type="text" placeholder="Wpisz nazwę kategorii" @bind="newCategory.Name">

		<div class="button-group">
			<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
			<button class="save-button" @onclick="()=>CreateCategory(newCategory)">Zapisz</button>
		</div>
	</div>

	<div class="category-container @(windowId == 6 ? "set-visible" : "set-hidden" )">
		@if (tempCategory is not null)
		{
			<h2>Edytuj kategorię</h2>
			<label>Nazwa:</label>
			<input type="text" placeholder="Wpisz nazwę kategorii" @bind="tempCategory.Name">

			<div class="button-group">
				<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
				<button class="save-button" @onclick="()=>UpdateCategory(tempCategory)">Zapisz</button>
			</div>
		}
	</div>

	<div class="productCard-container @(windowId == 7 ? "set-visible" : "set-hidden" )">
		<h2>Dodaj kartę produktu</h2>
		<label>Nazwa:</label>
		<input type="text" placeholder="Wpisz nazwę karty produktu" @bind="createProductCard.Name" />

		<label>Kategorie:</label>
		<div class="search-container">
			<input type="text" placeholder="Wybierz kategorie"
				   @bind="searchNewCategory"
				   @oninput="CategoriesOnNewSearchChanged"
				   @onfocus="ShowAllNewCategories">

			@if (showNewCategoriesSuggestions && filteredCategories.Any())
			{
				<button type="button" class="clear-button" @onclick="HideNewCategories">X</button>
			}
		</div>

		@if (showNewCategoriesSuggestions && filteredCategories.Any())
		{
			<ul class="categorySuggestions">
				@foreach (var category in filteredCategories)
				{
					<div class="category-item">
						<div>
							<input type="checkbox"
								   checked="@selectedNewCategoryIds.Contains(category.Id)"
								   @onchange="() => ToggleNewCategorySelection(category.Id)" />
						</div>
						<div>@category.Name</div>
					</div>
				}
			</ul>
		}

		<!-- Wybrane kategorie -->
		@if (selectedNewCategoryIds.Any())
		{
			<div class="selected-categories">
				<strong>Wybrane kategorie:</strong>
				<ul class="scrollable-list">
					@foreach (var category in categories.Where(c => selectedNewCategoryIds.Contains(c.Id)))
					{
						<li>@category.Name</li>
					}
				</ul>
			</div>
		}

		<label>Jednostka:</label>
		<input type="text" placeholder="Wybierz jednostkę" @bind="searchNewUnit" @oninput="UnitsOnCreatingSearchChanged">
		@if (showNewUnitsSuggestions && filteredUnits.Any())
		{
			<ul class="suggestions">
				@foreach (var unit in filteredUnits)
				{
					<li @onclick="() => SelectNewUnit(unit)">@unit.Name</li>
				}
			</ul>
		}

		<div class="button-group">
			<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
			<button class="save-button" @onclick="()=>CreateProductCard(createProductCard)">Zapisz</button>
		</div>
	</div>

	<div class="productCard-container @(windowId == 8 ? "set-visible" : "set-hidden" )">
		@if (tempProductCard is not null && editedProductCard is not null)
		{
			<h2>Edytuj kartę produktu</h2>
			<label>Nazwa:</label>
			<input type="text" placeholder="Wpisz nazwę karty produktu" @bind="tempProductCard.Name">

			<label>Kategorie:</label>
			<div class="search-container">
				<input type="text" placeholder="Wybierz kategorie"
					   @bind="searchEditedCategory"
					   @oninput="CategoriesOnEditedSearchChanged"
					   @onfocus="ShowAllEditedCategories">

				@if (showEditedCategoriesSuggestions && filteredCategories.Any())
				{
					<button type="button" class="clear-button" @onclick="HideEditedCategories">X</button>
				}
			</div>

			@if (showEditedCategoriesSuggestions && filteredCategories.Any())
			{
				<ul class="categorySuggestions">

					@foreach (var category in filteredCategories)
					{
						<div class="category-item">
							<div>
								<input type="checkbox"
									   checked="@selectedEditedCategoryIds.Contains(category.Id)"
									   @onchange="() => ToggleEditedCategorySelection(category.Id)" />
							</div>
							<div>@category.Name</div>
						</div>
					}
				</ul>
			}

			<!-- Wybrane kategorie -->
			@if (selectedEditedCategoryIds.Any())
			{
				<div class="selected-categories">
					<strong>Wybrane kategorie:</strong>
					<ul class="scrollable-list">
						@foreach (var category in categories.Where(c => selectedEditedCategoryIds.Contains(c.Id)))
						{
							<li>@category.Name</li>
						}
					</ul>
				</div>
			}

			<label>Jednostka:</label>
			<input type="text" placeholder="Wybierz jednostkę" @bind="searchEditedUnit = editedProductCard.Unit.Name" @oninput="UnitsOnEditingSearchChanged">
			@if (showEditedUnitsSuggestions && filteredUnits.Any())
			{
				<ul class="suggestions">
					@foreach (var unit in filteredUnits)
					{
						<li @onclick="() => SelectEditedUnit(unit)">@unit.Name</li>
					}
				</ul>
			}

			<div class="button-group">
				<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
				<button class="save-button" @onclick="()=>UpdateProductCard(tempProductCard)">Zapisz</button>
			</div>
		}
	</div>

	<div class="delete-container @(windowId == 9 ? "set-visible" : "set-hidden")">
		<h2>Czy na pewno chcesz usunąć wybrany element?</h2>

		<div class="button-group">
			<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
			<button class="delete-button" @onclick="()=>DeleteItem()">Usuń</button>
		</div>
	</div>

	<div class="nullProduct-container @(windowId == 11 ? "set-visible" : "set-hidden" )">
		<h2>Nie wybrano żadnego produktu.</h2>


		<div class="button-group">
			<button class="cancel-button" @onclick="()=>CloseWindow(10)">Anuluj</button>
		</div>
	</div>

	<!-- Główna treść sekcji -->
	<div class="content-container">
		<div id="magazyn" class="@(dictionaryType == "m" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
							<th>Lokalizacja</th>
						</tr>
					</thead>
					<tbody>
						@if (magazines is not null)
						{
							foreach (var magazine in magazines)
							{
								<tr id="@magazine.Id" @onclick="()=>SetParameterValue(dictionaryType, magazine.Id.ToString())" class="@(magazine.Id == currentMagazine.Id ? "active-row" : "")">
									<td>@magazine.Name</td>
									<td>@magazine.Location</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>


		<div id="jednostka" class="@(dictionaryType == "u" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
							<th>Skrót</th>
						</tr>
					</thead>
					<tbody>
						@if (units is not null)
						{
							foreach (var unit in units)
							{
								<tr id="@unit.Id" @onclick="()=>SetParameterValue(dictionaryType, unit.Id.ToString())" class="@(unit.Id == currentUnit.Id ? "active-row" : "")">
									<td>@unit.Name</td>
									<td>@unit.ShortName</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>

		<div id="kategoria" class="@(dictionaryType == "c" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
						</tr>
					</thead>
					<tbody>
						@if (categories is not null)
						{
							foreach (var category in categories)
							{
								<tr id="@category.Id" @onclick="()=>SetParameterValue(dictionaryType, category.Id.ToString())" class="@(category.Id == currentCategory.Id ? "active-row" : "")">
									<td>@category.Name</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>

		<div id="karta-produktu" class="@(dictionaryType == "pc" ? "content active" : "content")">
			<div class="table-container">
				<table class="dataDictionary-table">
					<thead>
						<tr>
							<th>Nazwa</th>
							<th>Kategoria</th>
							<th>Jednostka</th>
						</tr>
					</thead>
					<tbody>
						@if (productCards is not null)
						{
							foreach (var productCard in productCards)
							{
								<tr id="@productCard.Id" @onclick="()=>SetParameterValue(dictionaryType, productCard.Id.ToString())" class="@(productCard.Id == currentProductCard.Id ? "active-row" : "")">
									<td>@productCard.Name</td>
									<td>@string.Join(", ", @productCard.Categories?.Select(p => p.Name))</td>
									<td>@productCard.Unit.Name</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</main>

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "dt")]
	public string dictionaryType { get; set; }
	[Parameter]
	[SupplyParameterFromQuery(Name = "id")]
	public string recordId { get; set; }

	private Magazine currentMagazine = new();
	private Unit currentUnit = new();
	private Category currentCategory = new();
	private ProductCard currentProductCard = new();
	private Magazine newMagazine = new();
	private Unit newUnit = new();
	private Category newCategory = new();
	private CreateProductCard createProductCard = new();
	private CreateProductCard tempProductCard = new();
	private ProductCard editedProductCard = new();
	private Magazine tempMagazine = new();
	private Unit tempUnit = new();
	private Category tempCategory = new();
	private int windowId = 0;
	private int itemId = 0;
	private bool showNewUnitsSuggestions = true;
	private bool showNewCategoriesSuggestions = true;
	private string searchNewUnit = "";
	private string searchNewCategory = "";
	private bool showEditedUnitsSuggestions = true;
	private bool showEditedCategoriesSuggestions = true;
	private string searchEditedUnit = "";
	private string searchEditedCategory = "";

	HttpClient httpClient = new();

	private List<Magazine>? magazines = new();
	private List<Unit>? units = new();
	private List<Unit>? filteredUnits = new();
	private List<Category>? categories = new();
	private List<Category>? filteredCategories = new();
	private List<ProductCard>? productCards = new();
	private List<int> selectedNewCategoryIds = new();
	private List<Category> selectedNewCategories = new();
	private List<int> selectedEditedCategoryIds = new();
	private List<Category> selectedEditedCategories = new();

	protected async override Task OnInitializedAsync()
	{
		var magazineResponse = await httpClient.GetAsync("http://localhost:5000/api/Magazines");
		var unitResponse = await httpClient.GetAsync("http://localhost:5000/api/Units");
		var categoryResponse = await httpClient.GetAsync("http://localhost:5000/api/Categories");
		var productCardResponse = await httpClient.GetAsync("http://localhost:5000/api/ProductCards");

		if (magazineResponse.IsSuccessStatusCode)
		{
			var magazineText = await magazineResponse.Content.ReadAsStringAsync();
			magazines = System.Text.Json.JsonSerializer.Deserialize<List<Magazine>>(magazineText);
		}

		if (unitResponse.IsSuccessStatusCode)
		{
			var unitText = await unitResponse.Content.ReadAsStringAsync();
			units = System.Text.Json.JsonSerializer.Deserialize<List<Unit>>(unitText);
		}

		if (categoryResponse.IsSuccessStatusCode)
		{
			var categoryText = await categoryResponse.Content.ReadAsStringAsync();
			categories = System.Text.Json.JsonSerializer.Deserialize<List<Category>>(categoryText);
		}

		if (productCardResponse.IsSuccessStatusCode)
		{
			var productCardText = await productCardResponse.Content.ReadAsStringAsync();
			productCards = System.Text.Json.JsonSerializer.Deserialize<List<ProductCard>>(productCardText);
		}
		StateHasChanged();

		return;
	}

	protected async override Task OnParametersSetAsync()
	{
		if (dictionaryType == "m" && recordId == "0")
		{
			currentMagazine = new();
		}
		else if (dictionaryType == "u" && recordId == "0")
		{
			currentUnit = new();
		}
		else if (dictionaryType == "c" && recordId == "0")
		{
			currentCategory = new();
		}
		else if (dictionaryType == "pc" && recordId == "0")
		{
			currentProductCard = new();
		}
		else if (dictionaryType == "m" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentMagazine = magazines.First(x => x.Id == intId);
		}
		else if (dictionaryType == "u" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentUnit = units.First(x => x.Id == intId);
		}
		else if (dictionaryType == "c" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentCategory = categories.First(x => x.Id == intId);
		}
		else if (dictionaryType == "pc" && recordId != "0")
		{
			var intId = int.Parse(recordId);
			currentProductCard = productCards.First(x => x.Id == intId);
		}
		return;
	}

	private void SetParameterValue(string dictionaryType, string id = "0")
	{
		NavManager.NavigateTo($"https://localhost:7110/dataDictionary?dt={dictionaryType}&id={id}");
	}

	protected async Task CreateMagazine(Magazine magazine)
	{
		var json = JsonConvert.SerializeObject(magazine);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PostAsync("http://localhost:5000/api/Magazines", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}

	}

	protected async Task UpdateMagazine(Magazine magazine)
	{
		var json = JsonConvert.SerializeObject(magazine);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PutAsync("http://localhost:5000/api/Magazines", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}

	}

	protected async Task CreateUnit(Unit unit)
	{
		var json = JsonConvert.SerializeObject(unit);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PostAsync("http://localhost:5000/api/Units", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}

	}

	protected async Task UpdateUnit(Unit unit)
	{
		var json = JsonConvert.SerializeObject(unit);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PutAsync("http://localhost:5000/api/Units", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}

	}

	protected async Task CreateCategory(Category category)
	{
		var json = JsonConvert.SerializeObject(category);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PostAsync("http://localhost:5000/api/Categories", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}

	}

	protected async Task CreateProductCard(CreateProductCard createproductCard)
	{
		var json = JsonConvert.SerializeObject(createproductCard);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PostAsync("http://localhost:5000/api/ProductCards", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}

	}

	protected async Task UpdateCategory(Category category)
	{
		var json = JsonConvert.SerializeObject(category);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PutAsync("http://localhost:5000/api/Categories", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}
	}

	protected async Task UpdateProductCard(CreateProductCard productCard)
	{
		var json = JsonConvert.SerializeObject(productCard);
		var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		var response = await httpClient.PutAsync("http://localhost:5000/api/ProductCards", data);
		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd: {errorMessage}");
		}
	}

	protected async Task DeleteItemById(int itemId)
	{
		HttpResponseMessage response = new();

		if (dictionaryType == "m")
		{
			response = await httpClient.DeleteAsync($"http://localhost:5000/api/Magazines/{itemId}");
		}
		else if (dictionaryType == "u")
		{
			response = await httpClient.DeleteAsync($"http://localhost:5000/api/Units/{itemId}");
		}
		else if (dictionaryType == "c")
		{
			response = await httpClient.DeleteAsync($"http://localhost:5000/api/Categories/{itemId}");
		}
		else if (dictionaryType == "pc")
		{
			response = await httpClient.DeleteAsync($"http://localhost:5000/api/ProductCards/{itemId}");
		}

		if (response.IsSuccessStatusCode)
		{
			CloseWindow(10);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Błąd podczas usuwania: {errorMessage}");
		}
	}

	private async void DeleteItem()
	{
		if (dictionaryType == "m")
		{
			await DeleteItemById(currentMagazine.Id);
			SetParameterValue("m");
		}
		else if (dictionaryType == "u")
		{
			await DeleteItemById(currentUnit.Id);
			SetParameterValue("u");
		}
		else if (dictionaryType == "c")
		{
			await DeleteItemById(currentCategory.Id);
			SetParameterValue("c");
		}
		else if (dictionaryType == "pc")
		{
			await DeleteItemById(currentProductCard.Id);
			SetParameterValue("pc");
		}
	}

	private void EditMagazine(Magazine magazine)
	{
		if (magazine is not null)
		{
			tempMagazine = new Magazine
				{
					Id = magazine.Id,
					CreatedDate = magazine.CreatedDate,
					Name = magazine.Name,
					Location = magazine.Location
				};
		}
	}

	private void EditUnit(Unit unit)
	{
		if (unit is not null)
		{
			tempUnit = new Unit
				{
					Id = unit.Id,
					CreatedDate = unit.CreatedDate,
					Name = unit.Name,
					ShortName = unit.ShortName
				};
		}
	}

	private void EditCategory(Category category)
	{
		if (category is not null)
		{
			tempCategory = new Category
				{
					Id = category.Id,
					CreatedDate = category.CreatedDate,
					Name = category.Name
				};
		}
	}

	private void EditProductCard(ProductCard productCard)
	{
		if (productCard is not null)
		{
			editedProductCard = new ProductCard
				{
					Unit = productCard.Unit
				};
			selectedEditedCategoryIds = productCard.Categories.Select(x => x.Id).ToList();
			tempProductCard = new CreateProductCard
				{
					Id = productCard.Id,
					Name = productCard.Name,
					UnitId = productCard.UnitId,
					CategoryIds = selectedEditedCategoryIds
				};
		}
	}

	private void UnitsOnCreatingSearchChanged(ChangeEventArgs e)
	{
		searchNewUnit = e.Value.ToString();

		if (string.IsNullOrWhiteSpace(searchNewUnit))
		{
			// Ukryj sugestie, jeśli pole jest puste
			showNewUnitsSuggestions = false;
			filteredUnits.Clear();
		}
		else
		{
			// Pokazuj sugestie, gdy tekst jest wpisany
			showNewUnitsSuggestions = true;
			filteredUnits = units
				.Where(m => m.Name.Contains(searchNewUnit, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}

		StateHasChanged();
	}

	private void UnitsOnEditingSearchChanged(ChangeEventArgs e)
	{
		searchEditedUnit = e.Value.ToString();

		if (string.IsNullOrWhiteSpace(searchEditedUnit))
		{
			// Ukryj sugestie, jeśli pole jest puste
			showEditedUnitsSuggestions = false;
			filteredUnits.Clear();
		}
		else
		{
			// Pokazuj sugestie, gdy tekst jest wpisany
			showEditedUnitsSuggestions = true;
			filteredUnits = units
				.Where(m => m.Name.Contains(searchEditedUnit, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}
		StateHasChanged();
	}

	private void SelectNewUnit(Unit unit)
	{
		searchNewUnit = unit.Name;
		createProductCard.UnitId = unit.Id;
		filteredUnits.Clear();
		showNewUnitsSuggestions = false;
	}

	private void SelectEditedUnit(Unit unit)
	{
		searchEditedUnit = unit.Name;
		createProductCard.UnitId = unit.Id;
		filteredUnits.Clear();
		showEditedUnitsSuggestions = false;
	}

	private void ShowAllEditedCategories()
	{
		if (categories is not null)
		{
			// Ustawiamy całą listę kategorii jako sugestie
			filteredCategories = categories.ToList();
			showEditedCategoriesSuggestions = true;
		}

		StateHasChanged();
	}

	private void ShowAllNewCategories()
	{
		if (categories is not null)
		{
			// Ustawiamy całą listę kategorii jako sugestie
			filteredCategories = categories.ToList();
			showNewCategoriesSuggestions = true;
		}

		StateHasChanged();
	}

	private void CategoriesOnNewSearchChanged(ChangeEventArgs e)
	{
		if (categories is not null && filteredCategories is not null)
		{
			searchNewCategory = e.Value.ToString();

			if (string.IsNullOrWhiteSpace(searchNewCategory))
			{
				showNewCategoriesSuggestions = false;
				filteredCategories.Clear();
			}
			else
			{
				showNewCategoriesSuggestions = true;
				filteredCategories = categories
					.Where(c => c.Name.Contains(searchNewCategory, StringComparison.OrdinalIgnoreCase))
					.ToList();
			}
		}

		StateHasChanged();
	}

	private void CategoriesOnEditedSearchChanged(ChangeEventArgs e)
	{
		if (categories is not null && filteredCategories is not null)
		{
			searchEditedCategory = e.Value.ToString();

			if (string.IsNullOrWhiteSpace(searchEditedCategory))
			{
				showEditedCategoriesSuggestions = false;
				filteredCategories.Clear();
			}
			else
			{
				showEditedCategoriesSuggestions = true;
				filteredCategories = categories
					.Where(c => c.Name.Contains(searchEditedCategory, StringComparison.OrdinalIgnoreCase))
					.ToList();
			}
		}

		StateHasChanged();
	}

	private void ToggleNewCategorySelection(int categoryId)
	{
		if (categories is not null)
		{
			if (selectedNewCategoryIds.Contains(categoryId))
			{
				selectedNewCategoryIds.Remove(categoryId);
			}
			else
			{
				selectedNewCategoryIds.Add(categoryId);
			}

			createProductCard.CategoryIds = selectedNewCategoryIds;

			StateHasChanged();
		}
	}

	private void ToggleEditedCategorySelection(int categoryId)
	{
		if (categories is not null)
		{

			if (selectedEditedCategoryIds.Contains(categoryId))
			{
				selectedEditedCategoryIds.Remove(categoryId);
			}
			else
			{
				selectedEditedCategoryIds.Add(categoryId);
			}

			createProductCard.CategoryIds = selectedEditedCategoryIds;

			StateHasChanged();
		}
	}

	private void HideEditedCategories()
	{
		showEditedCategoriesSuggestions = false;
		StateHasChanged();
	}

	private void HideNewCategories()
	{
		showNewCategoriesSuggestions = false;
		StateHasChanged();
	}


	private void OpenWindow(int id)
	{
		windowId = id;
	}

	private void CloseWindow(int id)
	{
		windowId = id;
	}

	private void OpenCreatingWindows()
	{
		if (dictionaryType == "m")
		{
			newMagazine = new();
			OpenWindow(1);
		}
		else if (dictionaryType == "u")
		{
			newUnit = new();
			OpenWindow(3);
		}
		else if (dictionaryType == "c")
		{
			newCategory = new();
			OpenWindow(5);
		}
		else if (dictionaryType == "pc")
		{
			createProductCard = new();
			OpenWindow(7);
		}
	}

	private void OpenEditingWindows()
	{
		if (dictionaryType == "m")
		{
			if (recordId != "0")
			{
				EditMagazine(currentMagazine);
				OpenWindow(2);
			}
			else
			{
				OpenWindow(11);
			}
		}
		else if (dictionaryType == "u")
		{
			if (recordId != "0")
			{
				EditUnit(currentUnit);
				OpenWindow(4);
			}
			else
			{
				OpenWindow(11);
			}
		}
		else if (dictionaryType == "c")
		{
			if (recordId != "0")
			{
				EditCategory(currentCategory);
				OpenWindow(6);
			}
			else
			{
				OpenWindow(11);
			}
		}
		else if (dictionaryType == "pc")
		{
			if (recordId != "0")
			{
				EditProductCard(currentProductCard);
				OpenWindow(8);
			}
			else
			{
				OpenWindow(11);
			}
		}
	}
}
